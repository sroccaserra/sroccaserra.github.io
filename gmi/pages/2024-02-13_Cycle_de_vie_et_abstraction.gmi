-- date: 2024-02-13
# Cycle de vie et abstraction

Je refais un peu de C++ en feuilletant la troisi√®me √©dition de "A Tour of C++",
et j'aime bien. C'est amusant, car j'ai fait beaucoup de C++ en d√©but de
carri√®re et j'en avais gard√© un souvenir peu √©mu, je me souvenais surtout des
footguns. Il a m√™me d√ª m'arriver d'en dire du mal quand j'en avais l'occasion.
Aujourd'hui, je suis √† nouveau int√©ress√© par ce que j'ai appris gr√¢ce √† ce
langage. J'ai l'impression que mes opinions suivent des phases.

Dans les choses que j'ai apprises, je suis content d'en avoir fait
suffisamment √† l'√©poque pour √©viter les `new` et avoir en t√™te RAII, √ßa
semble encore pertinent en C++ moderne.

Je note aussi que le principe RAII (Resource Acquisition Is
Initialization) m'a donn√© le go√ªt de la sym√©trie dans le cycle de vie.
J'appr√©cie que la cr√©ation d'un objet et sa destruction / sortie de
scope, ou que les ouvertures et fermetures de ressources aient lieu au
m√™me niveau d'abstraction, et si possible dans des positions sym√©triques.

Je repense souvent √† ce principe, m√™me dans des langages o√π on ne g√®re
pas explicitement la m√©moire. Pour essayer de le d√©crire, souvent il y a
des traitements qui peuvent bien se mod√©liser en poup√©es gigognes de&nbsp;:

- "pr√©paration"
- "ex√©cution"
- "conclusion"

La pr√©paration et la conclusion pouvant √™tre sym√©triques et au m√™me
niveau d'abstraction. Et la phase ex√©cution pouvant √™tre une descente
dans le niveau d'abstraction qui √† son tour peut se mod√©liser comme une
"pr√©paration" / "ex√©cution" / "conclusion" (avec des tortues jusqu'en
bas).


J'appr√©cie ce genre de mini patterns, √ßa m'aide souvent √† structurer ma
pens√©e. Je le per√ßois comme du "micro-design" (nom inspir√© des
"microtests", un nom que je pr√©f√®re √† Unit Test). Un autre exemple connu
auquel je pense aussi comme du "micro-design" est les Four Elements of
Simple Design (voir liens ci-dessous).

Autre exemple : en plissant les yeux on peut voir le pattern Functional Core,
Imperative Shell comme un pattern "pr√©paration" / "ex√©cution" (fonctionnelle
pure) / "conclusion".

üßµ&nbsp;[@sroccaserra](https://mastodon.social/@sroccaserra/111924533437429454)

## Liens

- <https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization>
- <https://www.stroustrup.com/tour3.html>
- <https://en.wikipedia.org/wiki/Turtles_all_the_way_down>
- <http://anarchycreek.com/2009/05/20/theyre-called-microtests/>
- <https://blog.jbrains.ca/permalink/the-four-elements-of-simple-design>
- <https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell>
